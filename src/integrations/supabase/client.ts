// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zummzziydfpvwuxxuyyu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp1bW16eml5ZGZwdnd1eHh1eXl1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg0OTkxNzksImV4cCI6MjA2NDA3NTE3OX0.AFoGIoREPaRBX1Lvo1-c7ctiJiyknvY-YKWTldMJDzo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Enhanced Supabase client with better session handling
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    // Enable automatic token refresh
    autoRefreshToken: true,
    // Persist session in localStorage
    persistSession: true,
    // Detect session in URL (for email confirmation links, etc.)
    detectSessionInUrl: true,
    // Set token refresh threshold to 10 seconds before expiry
    refreshThreshold: 10,
  },
  // Enable realtime for better session synchronization
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Enhanced error handler for better session management
supabase.auth.onAuthStateChange((event, session) => {
  console.log('üîê Auth state changed:', event, session?.user?.email);
  
  if (event === 'TOKEN_REFRESHED') {
    console.log('‚úÖ Token refreshed successfully');
  } else if (event === 'SIGNED_OUT') {
    console.log('üëã User signed out');
  } else if (event === 'SIGNED_IN') {
    console.log('üëã User signed in:', session?.user?.email);
  }
});

// Helper function to check if session is valid and refresh if needed
export const ensureValidSession = async (attempt = 1): Promise<boolean> => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    
    // Handle errors and empty sessions
    if (error || !session?.access_token) {
      console.error('‚ùå Session check failed:', error || 'No access token');
      return false;
    }
    
    // Check token expiration with buffer
    const tokenExp = session.expires_at;
    const now = Math.floor(Date.now() / 1000);
    const timeUntilExp = (tokenExp || 0) - now;
    
    // Refresh token if it's about to expire (with 10 min buffer)
    if (timeUntilExp < 600) {
      console.log('üîÑ Token expiring soon (expires in', timeUntilExp, 'seconds), refreshing...');
      
      // Attempt refresh with retry logic
      try {
        const { data: { session: refreshedSession }, error: refreshError } =
          await supabase.auth.refreshSession();
        
        if (refreshError) {
          console.error('‚ùå Token refresh failed:', refreshError);
          if (attempt < 3) {
            console.log('Retrying refresh in 2 seconds...');
            await new Promise(resolve => setTimeout(resolve, 2000));
            return ensureValidSession(attempt + 1);
          }
          return false;
        }
        
        console.log('‚úÖ Token refreshed successfully');
        return !!refreshedSession;
      } catch (refreshError) {
        console.error('‚ùå Token refresh error:', refreshError);
        return false;
      }
    }
    
    // Verify active connection
    if (!supabase.realtime.isConnected()) {
      console.log('‚ö†Ô∏è Realtime connection lost, reconnecting...');
      supabase.realtime.connect();
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Session validation error:', error);
    if (attempt < 2) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      return ensureValidSession(attempt + 1);
    }
    return false;
  }
};

// Track connection state
let isConnected = true;
let connectionChannel: ReturnType<typeof supabase.channel> | null = null;

// Monitor connection status using system channel
const setupConnectionMonitoring = () => {
  if (connectionChannel) return;

  connectionChannel = supabase.channel('realtime:system')
    .on('system', { event: 'CONNECTED' }, () => {
      isConnected = true;
      console.log('üîå Realtime connection established');
    })
    .on('system', { event: 'DISCONNECTED' }, () => {
      isConnected = false;
      console.log('‚ö†Ô∏è Realtime connection lost');
    })
    .on('system', { event: 'ERROR' }, (payload) => {
      console.error('‚ùå Realtime error:', payload);
    })
    .subscribe((status) => {
      if (status === 'SUBSCRIBED') {
        console.log('üîå Started monitoring connection status');
      }
    });

  return () => {
    connectionChannel?.unsubscribe();
    connectionChannel = null;
  };
};

// Initialize connection monitoring
setupConnectionMonitoring();

// Helper to check/get connection status
export const checkConnection = () => {
  if (!isConnected && supabase.realtime.isConnected()) {
    setupConnectionMonitoring();
    supabase.realtime.connect();
  }
  return isConnected;
};
